Data Types
===================

Comments:  // Single line       /* Multiline */

string => alphanumeric (defaults to "")

int => 2 billion to -2 billion (defaults to 0)

double => fractional value (defaults to 0.0)

bool => true or false (defaults to false)

more: http://is.gd/data_types



Data Type Conversation
===================

Implicit Conversation - smaller type to larger type
without data loss, "upcasting"

Explicit conversions - require developer intervention,
possibility of data loss, "downcasting", either in
the form of casting or using a helper method.

Casting number:
int myInteger = (int)myDouble;

Number to string:
string myString = myInteger.ToString();

String to Numbers:
int myInteger = int.Parse(myString);

More:http://is.gd/datatype_conversion


Arithmetic Operators
===================

= NOT equality, it's assignment

Operators: + - * /

Addition Assignment
total = total + 5;
total += 5;

increment Operator: i++
decrement operator: i--

Beware of order of precedence (use parenthesis)
Beware of downcasting (you'll lose precision)
Beware of overflow (use bigger types)

To make overflow throw an exception:

checked
{
	// some arithmetic operation
	// that could potentially overflow
}


C# Syntax
===================

Operands - variable  name, object / server control names, literals - "Noun" (you name these)


Operators - "Verbs" ... they act on the operands.

http://is.gd/operators


Expressions - One or more operands and zero or more operators that evaluate to a single value

http://is.gd/expressions

Statements - A complete instruction - assignment of an 
expression to avariable, an increment / decrement, etc.

http://is.gd/statement

Statements must end in a semi-colon ;
Whitespace is ignored (use for humans)


Conditional if ... else if ... else Statement 
=============================================
= Assignment
== Equality

if (a==b)
{
	//this will execute if expression is true
}
else
{
	//this will execute if expression is false
}

... or ... evaluate other mutually exclusively options:

if (a == b) {//some code}
else if (a == c) {//some code}
else if (a == d) {//some code}
else {//some code}

CheckBox Server Control = Checked prop is bool

RadioButton Server Control = GroupName prop groups
them together, check prop is bool


Conditional Ternary Operator
=============================
Shortcut for evaluating an expression and
returning a result.
result = (a == b) ? "Equal" : "Not Equal";



