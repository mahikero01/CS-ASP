Data Types
===================

Comments:  // Single line       /* Multiline */

string => alphanumeric (defaults to "")

int => 2 billion to -2 billion (defaults to 0)

double => fractional value (defaults to 0.0)

bool => true or false (defaults to false)

more: http://is.gd/data_types



Data Type Conversation
===================

Implicit Conversation - smaller type to larger type
without data loss, "upcasting"

Explicit conversions - require developer intervention,
possibility of data loss, "downcasting", either in
the form of casting or using a helper method.

Casting number:
int myInteger = (int)myDouble;

Number to string:
string myString = myInteger.ToString();

String to Numbers:
int myInteger = int.Parse(myString);

More:http://is.gd/datatype_conversion


Arithmetic Operators
===================

= NOT equality, it's assignment

Operators: + - * /

Addition Assignment
total = total + 5;
total += 5;

increment Operator: i++
decrement operator: i--

Beware of order of precedence (use parenthesis)
Beware of downcasting (you'll lose precision)
Beware of overflow (use bigger types)

To make overflow throw an exception:

checked
{
	// some arithmetic operation
	// that could potentially overflow
}


C# Syntax
===================

Operands - variable  name, object / server control names, literals - "Noun" (you name these)


Operators - "Verbs" ... they act on the operands.

http://is.gd/operators


Expressions - One or more operands and zero or more operators that evaluate to a single value

http://is.gd/expressions

Statements - A complete instruction - assignment of an 
expression to avariable, an increment / decrement, etc.

http://is.gd/statement

Statements must end in a semi-colon ;
Whitespace is ignored (use for humans)


Conditional if ... else if ... else Statement 
=============================================
= Assignment
== Equality

if (a==b)
{
	//this will execute if expression is true
}
else
{
	//this will execute if expression is false
}

... or ... evaluate other mutually exclusively options:

if (a == b) {//some code}
else if (a == c) {//some code}
else if (a == d) {//some code}
else {//some code}

CheckBox Server Control = Checked prop is bool

RadioButton Server Control = GroupName prop groups
them together, check prop is bool


Conditional Ternary Operator
=============================
Shortcut for evaluating an expression and
returning a result.
result = (a == b) ? "Equal" : "Not Equal";


Comparison and Logical Operator
===============================
==
!=
< .
<= >=
!someBooleanValue - means NOT is true

Logical Operators
used to combine multiple expressions / evaluation

&& - AND
|| - OR

Combine with parenthesis () for order of precedence


Working with Dates and Times
=============================

Creating new DateTime objects
Datetime myDateTime = DateTime.Now;
DateTime myDateTime = DateTime("12/7/1969");

Formatting ... many options:
myDateTime.To_____()

Retrieving Parts:
myDateTime.Year //int
myDateTime.Hour //int
myDateTime.DayOfWeek // "Monday"
myDateTime.DayOfYear // int 175

DateTime Math:
myDateTime.AddHour(3)
myDateTime.AddMinute(-5)

"Chaining" = using multiple helper methods (fluent programming)
together with the dot . operator
myDate.AddHour(3).AddMinute(-5).ToString()


Working with Spans of Time
==========================

Create and initialize new TimeSpans

//Days.Hours:Minutes:Seconds.milliseconds
TimeSpan myTimeSpan = TimeSpan.Parse("1.2:3:30.5");

DateTime myBirthday = DateTime.Parse("1/5/1975");
TimeSpan myAge = DateTime.Now.Subtract(myBirthday);

More info at http://is.gd/timespan

Get individual parts
myAge.Hours
myAge.Seconds

... get TOTAL elapse time
as double representing both 
the number of days / hours / etc.
AND fractional values representing
"left overs".

myTimeSpan.TotalDays // double
myTimeSpan.TotalHours // double


Formatting Strings
====================

Concenate Strings
+ +=

Format Strings
String.Format("Hello {0}. You are from {1}", "Rico", "Manila")

Format Numbers
String.Format("Reference Code: {0:000_000-0}", 1234567)
123_456-7

Formatting Dates
http://is.gd/formattingdates
String.Format("Reference Date: {0:ddd - d, MM, YYYY}", someDate)
Tue - 5, 07, 2014

Formatting Currency
http://is.gd/formattingcurrency
String.Format("Total: {0:C}", totalAmount);
$50,000.00


Single Dimensional Arrays
=========================

Indexes vs. Elements
Accessor vs. Stored Values
Indexes are zero based

Declaring  Arrays
string[] myArray = new string[3];

Declaring and Initializing Arrays
string[] myArray = new string [3] {"Moe", "Larry", "Curly"};

Setting / Getting Values
string myString = myArray[1]; // Retrieve the second element
myArray[0] = myString; // Sets first element


Multi-Dimensional Arrays
========================
Same as single dimensional ... just requires
more indexes (in dimensions) to get to the element

double[,] myArray = new double[2,3]; // contains 6 elements
int[,,] rubicsCube = new int[3,3,3] // contains 27 elements

rubicsCube[0,1,2] = 42;
myInteger = rubicsCube[0,1,2];


Changing the Length of an Array
================================

Arrays are immutable = cannot be changed in memory
HOWEVER >NET Framework providers helper methods to
resize an array ... creates a new array and copies
the old values into it.

Array.Resize(ref myArray, myArray.Length + 1);

// Get the highest index:
int highestIndex = myArray.GetUpperBound(0);
// 0 = dimension we want to retrieve the 
// upper boundary for

// Arrays have other helper methods
myArray.Sum()
myArray.min()
myArray.Max()
myArray.Average()

Array.Sort(myArray)
Array.Reverse(myArray)


Looping with the for Iteration Statement
========================================

Snippet: for [tab] [tab]
Then you can tab through the replaceable bits, hit enter to
start writing code in the code block body

for (int i = 0; i < 10; i++)
{
	//your code here
}

i - Any variable name

1st part - counter declaration, can be initialized to any number
2nd part - condition, can be any expression tha equates to a  bool
3rd part - increment i+= / decrement i--, can step more than 1 using +=,

string[] names = new string[] { "Wolverine", "Cyclops", "Professor X", 

"Phoenix" };

for (int i = 0; i < names.Length; i++)
{
  // Cna search for a specific value
  if (names[i] == "Professor X")
  {
     // Do something here
     // Can break out of additional iterations if you need to
     break;
  }
}







